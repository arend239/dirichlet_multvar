ps = apply(prob_top, 1, function(x) paste(x), collapse = "; "))
docs_samp <- sample(1:nrow(lda4$theta), 3)
prob <- lda4$theta[docs_samp, ]
top  <- apply(prob, 1, which.max)
resum <- data.frame(
doc      = docs_samp,
prob_top = prob_top,
ps = apply(prob_top, 1, function(x) paste(x), collapse = "; "))
set.seed(42)
docs_samp <- sample(1:nrow(lda4$theta), 3)
prob <- lda4$theta[docs_samp, ]
top  <- apply(prob, 1, which.max)
resum <- data.frame(
doc      = docs_samp,
prob_top = top,
ps = apply(top, 1, function(x) paste(x), collapse = "; "))
set.seed(42)
docs_samp <- sample(1:nrow(lda4$theta), 3)
prob <- lda4$theta[docs_samp, ]
top  <- apply(prob, 1, which.max)
resum <- data.frame(
doc      = docs_samp,
prob_top = top,
ps = apply(top, 1, function(x) paste(x, collapse = "; "))
)
set.seed(42)
docs_samp <- sample(1:nrow(lda4$theta), 3)
prob <- lda4$theta[docs_samp, ]
top  <- apply(prob, 1, which.max)
resum <- data.frame(
doc      = docs_samp,
prob_top = top,
ps = apply(prob, 1, function(x) paste(x, collapse = "; "))
)
print(resum)
topicQuality(lda4)
topicQuality(lda4, document)
topicQuality(lda4, dfm_document)
topicQuality(lda4, dfm$document)
View(dfm)
View(imdb)
View(dtm)
View(dfm)
View(dfm)
dfm <- dtm %>%
cast_dfm(document = document,
term = term,
value = count)
dfm <- tyde(dtm) %>%
cast_dfm(document = document,
term = term,
value = count)
dfm <- tidy(dtm) %>%
cast_dfm(document = document,
term = term,
value = count)
topicQuality(lda4, dfm$docvars$docname_)
dfm$docvars
dfm[docvars$docname_]
topicQuality(lda4, dfm[docvars$docname_,])
dfm[docvars$docname_,]
plot(lda4)
print(resum)
docs_samp <- sample(1:nrow(lda4$theta), 10)
set.seed(42)
plot(lda4)
docs_samp <- sample(1:nrow(lda4$theta), 10)
prob <- lda4$theta[docs_samp, ]
top  <- apply(prob, 1, which.max)
resum <- data.frame(
doc      = docs_samp,
prob_top = top,
ps = apply(prob, 1, function(x) paste(x, collapse = "; "))
)
print(resum)
View(corpus)
View(dtm)
topicQuality(lda4, 1:1000)
string(seq(1,10,1))
str(seq(1,10,1))
seq(1,10,1)
str
str(seq(1,10,1))
topicQuality(lda4, string(1:1000))
topicQuality(lda4, dfm$documents)
topicQuality(lda4, dfm[documents])
lda4
View(lda4)
set.seed(42)
plot(lda4)
docs_samp <- sample(1:nrow(lda4$theta), 3)
prob <- lda4$theta[docs_samp, ]
top  <- apply(prob, 1, which.max)
resum <- data.frame(
doc      = docs_samp,
prob_top = top,
ps = apply(prob, 1, function(x) paste(x, collapse = "; "))
)
resum
# Extrair distribuição de tópicos por documento
doc_topics <- tidy(imdb_lda, matrix = "gamma")
# Relacionar com o sentimento original
doc_topics_with_sentiment <- doc_topics %>%
left_join(
data.frame(document = 1:nrow(imdb),
sentiment = imdb$sentiment),
by = "document"
)
# Ver distribuição média de tópicos por sentimento
topic_sentiment_dist <- doc_topics_with_sentiment %>%
group_by(sentiment, topic) %>%
summarise(mean_gamma = mean(gamma)) %>%
ungroup()
ggplot(topic_sentiment_dist, aes(factor(topic), mean_gamma, fill = sentiment)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Tópico", y = "Probabilidade Média",
title = "Distribuição de Tópicos por Sentimento") +
theme_minimal()
# Extrair distribuição de tópicos por documento
doc_topics <- tidy(lda4, matrix = "gamma")
# Relacionar com o sentimento original
doc_topics_with_sentiment <- doc_topics %>%
left_join(
data.frame(document = 1:nrow(imdb),
sentiment = imdb$sentiment),
by = "document"
)
# Ver distribuição média de tópicos por sentimento
topic_sentiment_dist <- doc_topics_with_sentiment %>%
group_by(sentiment, topic) %>%
summarise(mean_gamma = mean(gamma)) %>%
ungroup()
ggplot(topic_sentiment_dist, aes(factor(topic), mean_gamma, fill = sentiment)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Tópico", y = "Probabilidade Média",
title = "Distribuição de Tópicos por Sentimento") +
theme_minimal()
library(ggplot2)
library(dplyr)
# 1. Obter o tópico mais provável para cada documento
topic_distribution <- doc_topics %>%
group_by(document) %>%
slice_max(gamma, n = 1) %>%
ungroup()
# 2. Adicionar os rótulos de sentimento originais (se disponível)
if(exists("imdb")) {
topic_distribution <- topic_distribution %>%
left_join(
data.frame(
document = 1:nrow(imdb),
sentiment = imdb$sentiment
),
by = "document"
)
}
# 3. Criar o gráfico de distribuição
ggplot(topic_distribution, aes(x = factor(topic), fill = factor(topic))) +
geom_bar(stat = "count") +
labs(
x = "Tópico",
y = "Número de Documentos",
title = "Distribuição dos Tópicos Mais Prováveis por Documento",
fill = "Tópico"
) +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_brewer(palette = "Set2")
# 4. Versão com facetas por sentimento (se os dados tiverem essa informação)
if("sentiment" %in% colnames(topic_distribution)) {
ggplot(topic_distribution, aes(x = factor(topic), fill = factor(topic))) +
geom_bar(stat = "count") +
facet_wrap(~ sentiment, scales = "free_y") +
labs(
x = "Tópico",
y = "Número de Documentos",
title = "Distribuição dos Tópicos por Sentimento Original",
subtitle = "Facetado por avaliações Positivas e Negativas",
fill = "Tópico"
) +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_brewer(palette = "Set2")
}
# 5. Versão com proporções em vez de contagens
if("sentiment" %in% colnames(topic_distribution)) {
ggplot(topic_distribution, aes(x = factor(topic), fill = sentiment)) +
geom_bar(position = "fill") +
labs(
x = "Tópico",
y = "Proporção",
title = "Proporção de Sentimentos em Cada Tópico",
fill = "Sentimento Original"
) +
theme_minimal() +
scale_fill_manual(values = c("pos" = "#1f78b4", "neg" = "#e31a1c")) +
scale_y_continuous(labels = scales::percent_format())
}
doc_topics
View(doc_topics)
# Extrair distribuição de tópicos por documento
doc_topics <- tidy(lda4, matrix = "gamma")
# Relacionar com o sentimento original
doc_topics_with_sentiment <- doc_topics %>%
left_join(
data.frame(document = 1:nrow(imdb),
sentiment = imdb$sentiment),
by = "document"
)
library(ggplot2)
library(dplyr)
# 1. Obter o tópico mais provável para cada documento
topic_distribution <- doc_topics %>%
group_by(document) %>%
slice_max(gamma, n = 1) %>%
ungroup()
# 2. Adicionar os rótulos de sentimento originais (se disponível)
if(exists("imdb")) {
topic_distribution <- topic_distribution %>%
left_join(
data.frame(
document = 1:nrow(imdb),
sentiment = imdb$sentiment
),
by = "document"
)
}
# 3. Criar o gráfico de distribuição
ggplot(topic_distribution, aes(x = factor(topic), fill = factor(topic))) +
geom_bar(stat = "count") +
labs(
x = "Tópico",
y = "Número de Documentos",
title = "Distribuição dos Tópicos Mais Prováveis por Documento",
fill = "Tópico"
) +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_brewer(palette = "Set2")
# 4. Versão com facetas por sentimento (se os dados tiverem essa informação)
if("sentiment" %in% colnames(topic_distribution)) {
ggplot(topic_distribution, aes(x = factor(topic), fill = factor(topic))) +
geom_bar(stat = "count") +
facet_wrap(~ sentiment, scales = "free_y") +
labs(
x = "Tópico",
y = "Número de Documentos",
title = "Distribuição dos Tópicos por Sentimento Original",
subtitle = "Facetado por avaliações Positivas e Negativas",
fill = "Tópico"
) +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_brewer(palette = "Set2")
}
# 5. Versão com proporções em vez de contagens
if("sentiment" %in% colnames(topic_distribution)) {
ggplot(topic_distribution, aes(x = factor(topic), fill = sentiment)) +
geom_bar(position = "fill") +
labs(
x = "Tópico",
y = "Proporção",
title = "Proporção de Sentimentos em Cada Tópico",
fill = "Sentimento Original"
) +
theme_minimal() +
scale_fill_manual(values = c("pos" = "#1f78b4", "neg" = "#e31a1c")) +
scale_y_continuous(labels = scales::percent_format())
}
# Extrair distribuição de tópicos por documento
doc_topics <- tidy(lda4, matrix = "gamma")
# Relacionar com o sentimento original
doc_topics_with_sentiment <- doc_topics %>%
left_join(
data.frame(document = 1:nrow(imdb),
sentiment = imdb$sentiment),
by = "document"
)
# Extrair distribuição de tópicos por documento
doc_topics <- tidy(lda4, matrix = "gamma")
doc_topics
dfm <- tidy(dtm) %>%
cast_dfm(document = document,
term = term,
value = count)
lda4 <- stm(dfm,
K = 4,
verbose = FALSE,
init.type = "LDA",
seed = 42)
cloud(lda4, 1)
cloud(lda4, 2)
cloud(lda4, 3)
cloud(lda4, 4)
summary(lda4)
plot(lda4)
# Converter o modelo stm para formato tidy
tidy_lda <- tidy(lda4)
# Filtrar as top 10 palavras por tópico
top_words <- tidy_lda %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup()
# Gráfico
ggplot(top_words, aes(x = reorder_within(term, beta, topic), y = beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") +
coord_flip() +
scale_x_reordered() +
labs(x = NULL, y = "Probabilidade")
set.seed(42)
plot(lda4)
docs_samp <- sample(1:nrow(lda4$theta), 3)
prob <- lda4$theta[docs_samp, ]
top  <- apply(prob, 1, which.max)
resum <- data.frame(
doc      = docs_samp,
prob_top = top,
ps = apply(prob, 1, function(x) paste(x, collapse = "; "))
)
resum
# Extrair distribuição de tópicos por documento
doc_topics <- tidy(lda4, matrix = "gamma")
# 1. Obter o tópico mais provável para cada documento
topic_distribution <- doc_topics %>%
group_by(document) %>%
slice_max(gamma, n = 1) %>%
ungroup()
# 2. Adicionar os rótulos de sentimento originais (se disponível)
if(exists("imdb")) {
topic_distribution <- topic_distribution %>%
left_join(
data.frame(
document = 1:nrow(imdb),
sentiment = imdb$sentiment
),
by = "document"
)
}
# 3. Criar o gráfico de distribuição
ggplot(topic_distribution, aes(x = factor(topic), fill = factor(topic))) +
geom_bar(stat = "count") +
labs(
x = "Tópico",
y = "Número de Documentos",
title = "Distribuição dos Tópicos Mais Prováveis por Documento",
fill = "Tópico"
) +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_brewer(palette = "Set2")
# 4. Versão com facetas por sentimento (se os dados tiverem essa informação)
if("sentiment" %in% colnames(topic_distribution)) {
ggplot(topic_distribution, aes(x = factor(topic), fill = factor(topic))) +
geom_bar(stat = "count") +
facet_wrap(~ sentiment, scales = "free_y") +
labs(
x = "Tópico",
y = "Número de Documentos",
title = "Distribuição dos Tópicos por Sentimento Original",
subtitle = "Facetado por avaliações Positivas e Negativas",
fill = "Tópico"
) +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_brewer(palette = "Set2")
}
# 5. Versão com proporções em vez de contagens
if("sentiment" %in% colnames(topic_distribution)) {
ggplot(topic_distribution, aes(x = factor(topic), fill = sentiment)) +
geom_bar(position = "fill") +
labs(
x = "Tópico",
y = "Proporção",
title = "Proporção de Sentimentos em Cada Tópico",
fill = "Sentimento Original"
) +
theme_minimal() +
scale_fill_manual(values = c("pos" = "#1f78b4", "neg" = "#e31a1c")) +
scale_y_continuous(labels = scales::percent_format())
}
# Extrair distribuição de tópicos por documento
doc_topics <- tidy(lda4, matrix = "gamma")
# 1. Obter o tópico mais provável para cada documento
topic_distribution <- doc_topics %>%
group_by(document) %>%
slice_max(gamma, n = 1) %>%
ungroup()
# 3. Criar o gráfico de distribuição
ggplot(topic_distribution, aes(x = factor(topic), fill = factor(topic))) +
geom_bar(stat = "count") +
labs(
x = "Tópico",
y = "Número de Documentos",
title = "Distribuição dos Tópicos Mais Prováveis por Documento",
fill = "Tópico"
) +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_brewer(palette = "Set2")
View(lda4)
View(lda4)
View(imdb)
# Converter o modelo stm para formato tidy
tidy_lda <- tidy(lda4)
# Filtrar as top 10 palavras por tópico
top_words <- tidy_lda %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup()
# Gráfico
ggplot(top_words, aes(x = reorder_within(term, beta, topic), y = beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") +
coord_flip() +
scale_x_reordered() +
labs(x = NULL, y = "Probabilidade")
head(dfm)
head(lda4)
head(lda4$theta)
head(lda4$gamma)
top  <- apply(prob, 1, which.max)
top
top  <- max(prob)
top
set.seed(42)
plot(lda4)
docs_samp <- sample(1:nrow(lda4$theta), 3)
prob <- lda4$theta[docs_samp, ]
top  <- apply(prob, 1, which.max)
resum <- data.frame(
doc      = docs_samp,
prob_top = top,
ps = apply(prob, 1, function(x) paste(x, collapse = "; "))
)
resum
?tidy
??tidy
doc_topics
# Extrair distribuição de tópicos por documento
doc_topics <- tidy(lda4, matrix = "gamma")
doc_topics
View(lda4)
lda$theta
lda4$theta
head(lda4$theta)
doc_topics
plot(lda4)
set.seed(42)
doc_topics <- tidy(lda4, matrix = "gamma")
plot(lda4)
docs_samp <- sample(1:nrow(lda4$theta), 3)
prob <- lda4$theta[docs_samp, ]
top  <- apply(prob, 1, which.max)
resum <- data.frame(
doc      = docs_samp,
prob_top = top,
ps = apply(prob, 1, function(x) paste(x, collapse = "; "))
)
resum
topic_distribution
ggplot(topic_distribution, aes(x = factor(topic), fill = factor(topic))) +
geom_bar(stat = "count") +
labs(
x = "Tópico",
y = "Número de Documentos",
title = "Distribuição dos Tópicos Mais Prováveis por Documento",
fill = "Tópico"
) +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_brewer(palette = "Set2")
dtm_tidy <- tidy(dtm)
ap_dfm <- dtm_tidy %>%
cast_dfm(document = document, term = term, value = count)
ap_lda6 <- stm(ap_dfm, K = 6, verbose = FALSE, init.type = "LDA")
summary(ap_lda6)
# cloud(ap_lda6, 1)
# cloud(ap_lda6, 2)
# cloud(ap_lda6, 3)
# cloud(ap_lda6, 4)
# cloud(ap_lda6, 5)
# cloud(ap_lda6, 6)
# Converter o modelo stm para formato tidy
tidy_lda <- tidy(ap_lda6)
# Filtrar as top 10 palavras por tópico
top_words <- tidy_lda %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup()
# Gráfico
ggplot(top_words, aes(x = reorder_within(term, beta, topic), y = beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~topic, scales = "free") +
coord_flip() +
scale_x_reordered() +
labs(x = NULL, y = "Probabilidade")
perplexity(lda2, dtm)
dfm <- tidy(dtm) %>%
cast_dfm(document = document,
term = term,
value = count)
lda6 <- stm(dfm,
K = 6,
verbose = FALSE,
init.type = "LDA",
seed = 42)
cloud(lda6, 1)
cloud(lda6, 2)
cloud(lda6, 3)
cloud(lda6, 4)
summary(lda6)
plot(lda6)
